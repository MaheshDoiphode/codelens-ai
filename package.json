{
  "name": "fileintegrator",
  "displayName": "File Integrator",
  "description": "Integrates content from multiple files, directories, and VS Code resources via sessions with persistence.",
  "version": "0.0.8",
  "engines": {
    "vscode": "^1.97.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onView:fileIntegratorView"
  ],
  "main": "./out/extension.js",
  "dependencies": {
    "fs-extra": "^11.2.0",
    "uuid": "^9.0.1",
    "minimatch": "^9.0.5"
  },
  "devDependencies": {
    "@types/fs-extra": "^11.0.4",
    "@types/uuid": "^9.0.8",
    "@types/vscode": "^1.97.0",
    "@types/minimatch": "^5.1.2",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^8.25.0",
    "@typescript-eslint/parser": "^8.25.0",
    "eslint": "^9.21.0",
    "typescript": "^5.7.3",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1"
  },
  "contributes": {
    "configuration": {
      "title": "File Integrator",
      "properties": {
        "fileintegrator.exclude": {
          "type": "object",
          "description": "Configure glob patterns for files and folders (based on file system paths) that File Integrator should exclude when adding items via drag and drop from the Explorer. Does not apply to items added via 'Add Active Editor'. Prepend '**/' to match files/folders anywhere in the path.",
          "default": {
            "**/.git": true,
            "**/.svn": true,
            "**/.hg": true,
            "**/CVS": true,
            "**/.DS_Store": true,
            "**/node_modules": true,
            "**/bower_components": true,
            "**/__pycache__": true,
            "**/*.pyc": true,
            "**/.classpath": true,
            "**/.project": true,
            "**/.settings": true,
            "**/*.class": true,
            "**/target": true,
            "**/bin": true,
            "**/build": true,
            "**/.vscode": true
          },
          "additionalProperties": {
            "type": "boolean",
            "description": "Set to true to exclude files/folders matching the glob pattern during drag/drop."
          }
        }
      }
    },
    "commands": [
      {
        "command": "fileintegrator.addSession",
        "title": "New Session",
        "icon": "$(add)"
      },
      {
        "command": "fileintegrator.removeSession",
        "title": "Remove Session",
        "icon": "$(trash)"
      },
      {
        "command": "fileintegrator.renameSession",
        "title": "Rename Session",
        "icon": "$(edit)"
      },
      {
        "command": "fileintegrator.clearSession",
        "title": "Clear All Items from Session",
        "icon": "$(clear-all)"
      },
      {
        "command": "fileintegrator.generateCodeBlock",
        "title": "Generate Code Block",
        "icon": "$(markdown)"
      },
      {
        "command": "fileintegrator.copyToClipboard",
        "title": "Copy Code Block to Clipboard",
        "icon": "$(copy)"
      },
      {
        "command": "fileintegrator.removeItem",
        "title": "Remove Item",
        "icon": "$(close)"
      },
      {
        "command": "fileintegrator.refreshView",
        "title": "Refresh View",
        "icon": "$(refresh)"
      },
      {
        "command": "fileintegrator.addActiveEditorToSession",
        "title": "Add Active Editor to Session",
        "icon": "$(add)"
      },
      {
        "command": "fileintegrator.addAllOpenEditorsToSession",
        "title": "Add All Open Editors to Session",
        "icon": "$(window)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "file-integrator",
          "title": "File Integrator",
          "icon": "resources/file-integrator.svg"
        }
      ]
    },
    "views": {
      "file-integrator": [
        {
          "id": "fileIntegratorView",
          "name": "Integration Sessions"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "fileintegrator.addSession",
          "when": "view == fileIntegratorView",
          "group": "navigation@1"
        },        {
          "command": "fileintegrator.refreshView",
          "when": "view == fileIntegratorView",
          "group": "navigation@2"
        }
      ],
      "view/item/context": [
        {
          "command": "fileintegrator.addActiveEditorToSession",
          "when": "view == fileIntegratorView && viewItem == session",
          "group": "inline@0"
        },
        {
          "command": "fileintegrator.addAllOpenEditorsToSession",
          "when": "view == fileIntegratorView && viewItem == session",
          "group": "inline@0.5"
        },
        {
          "command": "fileintegrator.generateCodeBlock",
          "when": "view == fileIntegratorView && viewItem == session",
          "group": "inline@1"
        },
        {
          "command": "fileintegrator.copyToClipboard",
          "when": "view == fileIntegratorView && viewItem == session",
          "group": "inline@2"
        },
        {
          "command": "fileintegrator.clearSession",
          "when": "view == fileIntegratorView && viewItem == session",
          "group": "inline@3"
        },
        {
          "command": "fileintegrator.renameSession",
          "when": "view == fileIntegratorView && viewItem == session",
          "group": "1_modification@1"
        },
        {
          "command": "fileintegrator.removeSession",
          "when": "view == fileIntegratorView && viewItem == session",
          "group": "1_modification@2"
        },
        {
          "command": "fileintegrator.removeItem",
          "when": "view == fileIntegratorView && (viewItem == resourceFile || viewItem == resourceDirectory)",
          "group": "inline@1"
        },
        {
          "command": "vscode.open",
          "when": "view == fileIntegratorView && (viewItem == resourceFile || viewItem == resourceDirectory)",
          "group": "navigation",
          "args": ["{{resourceUri}}"]
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  }
}